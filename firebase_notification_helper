import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:saeed/Screens/MainMap.dart';

import '../SignUpScreen.dart';

const AndroidNotificationChannel channel = AndroidNotificationChannel(
  'high_importance_channel', // id
  'High Importance Notifications', // title
  importance: Importance.high,

);
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  // If you're going to use other Firebase services in the background, such as Firestore,
  // make sure you call `initializeApp` before using other Firebase services.
  await Firebase.initializeApp();
  print('Handling a background message ${message.messageId}');
}

final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
FlutterLocalNotificationsPlugin();
notificationCofig() async{


  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
  await flutterLocalNotificationsPlugin
      .resolvePlatformSpecificImplementation<
      AndroidFlutterLocalNotificationsPlugin>()
      ?.createNotificationChannel(channel);

  await FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(alert: true,
    badge: true,
    sound: true,

  );
}

void myinitState(context) {
  var initializationSettingsAndroid =
  new AndroidInitializationSettings('app_icon');
  var initialzationSettingsAndroid =
  AndroidInitializationSettings('app_icon');
  var initializationSettings =
  InitializationSettings(android: initialzationSettingsAndroid);
  flutterLocalNotificationsPlugin.initialize(initializationSettings);

  FirebaseMessaging.onMessage.listen((RemoteMessage message) {
    if(message.data.isNotEmpty)
    {
      RemoteNotification? notification = message.notification;
      AndroidNotification? android = message.notification?.android;
      if (notification != null && android != null) {
        flutterLocalNotificationsPlugin.show(
            notification.hashCode,
            notification.title,
            notification.body,
            NotificationDetails(
              android: AndroidNotificationDetails(
                channel.id,
                channel.name,
                color: Colors.blue,
                icon: "assets/appicon.jpg",
              ),
            ));
      }
    }

  });

  FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
    if(message.data.isNotEmpty){
      RemoteNotification? notification = message.notification;
      AndroidNotification? android = message.notification?.android;
      if (notification != null && android != null && message.data.isNotEmpty) {

        if(message.data['type']=="rider_accept")
        {
          Get.to(MainMap(double.parse(message.data['plat']!), double.parse(message.data['plong']!)
              ,double.parse( message.data['dlat']!),double.parse( message.data['dlong']!),message.data['uniqID']));
        }

        // showDialog(context: context, builder: (context) {
        //   return AlertDialog(
        //     title: Text(notification.title!),
        //     content: Column(
        //       crossAxisAlignment: CrossAxisAlignment.start,
        //       children: [
        //         Text(notification.body!),
        //         Text(message.data['test']!),
        //       ],
        //     ),
        //   );
        // },);
        // Get.to(SigupScreen());
      }
    }
  });
  // workaround for onLaunch: When the app is completely closed (not in the background) and opened directly from the push notification
  FirebaseMessaging.instance.getInitialMessage().then((RemoteMessage? message) {
    if(message!=null){
      RemoteNotification? notification = message.notification;
      AndroidNotification? android = message.notification?.android;
      if (notification != null && android != null && message.data.isNotEmpty) {
        if(message.data['type']=="rider_accept")
        {
          Get.to(MainMap(double.parse(message.data['plat']!), double.parse(message.data['plong']!)
              ,double.parse( message.data['dlat']!),double.parse( message.data['dlong']!),message.data['uniqID']));
        }
        // showDialog(context: context, builder: (context) {
        //   return AlertDialog(
        //     title: Text(notification.title!),
        //     content: Column(
        //       crossAxisAlignment: CrossAxisAlignment.start,
        //       children: [
        //         Text(notification.body!),
        //         Text(message.data['test']),
        //       ],
        //     ),
        //   );
        // },);
        // Get.to(SigupScreen());
      }
    }

  });

  getFBToken();
}


String? token;
Future<String> getFBToken() async {
  token = await FirebaseMessaging.instance.getToken();

  print("this is token ${token}");

  return token??"";
}
